
package GUI;

import com.itextpdf.text.DocumentException;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import modelo.ComputadorVO;
import modelo.PermissoesVO;
import modelo.SecretariaVO;
import modelo.SetorVO;
import modelo.UsuarioVO;
import servicos.ComputadorServicos;
import servicos.SecretariaServicos;
import servicos.ServicosFactory;
import servicos.SetorServicos;
import servicos.UsuarioServicos;
import utilidades.Relatorio;
import utilidades.Tratamento;
import utilidades.Validacao;

/**
 * @author Maikel Maciel Rönnau
 * @version 1.0
 * @since 15/01/2015
 */
public class GUIManutencaoComputador extends javax.swing.JInternalFrame {
    
    /*** Variáveis para uso dos métodos da classe *****************************/
    
    //Instanciando objeto para receber as permissões do usuário:
    private static PermissoesVO per;
    
    //Instanciando objetos para acessar o método de busca:
    private static final ComputadorServicos cs = ServicosFactory.getComputadorServicos();
    private static final SecretariaServicos ss = ServicosFactory.getSecretariaServicos();
    private static final SetorServicos ses = ServicosFactory.getSetorServicos();
    
    //ArrayLists para receberr os resultados das consultas:
    private static ArrayList<ComputadorVO> computador;
    private static ArrayList<SecretariaVO> secretaria;
    private static ArrayList<SetorVO> setor;
    
    //Objetos das classes:
    private static SecretariaVO sec;
    private static SetorVO set;
    private static UsuarioVO user;
    private static ComputadorVO com;
    
    /*** Construção da tabela *************************************************/
    
    //Configurando colunas da tabela:
    String[] colunas = new String[]{"Nome", "Secretaria", "Setor", "Contato", "Status", 
        "Data entrada", "Hora entrada", "Técnico"};
    
    //Criando objeto da tabela:
    JTable tabela = new JTable();

    //Variável para receber o modelo da tabela:
    DefaultTableModel modeloTabela;
    
    //Variável para configurar o alinhamento dos dados:
    DefaultTableCellRenderer centro = new DefaultTableCellRenderer();    
    
    /*** Fim da construção da tabela ******************************************/
    
    /**
     * Creates new form GUIManutencaoComputador
     * @param per Objeto com as permissões do usuário
     */
    public GUIManutencaoComputador(PermissoesVO per) {
        this.per = per;
        
        initComponents();
        
        //Recebendo modelo da tabela:
        this.modeloTabela = (DefaultTableModel)jTableComputador.getModel();
        
        //Configurando as permissões:
        configurarPermissoes();
        
        //Método para preencher os dados da tabela:
        preencherTabela();
        
        //Métodos para preencher os dados da interface:
        preencherSelecaoSecretaria();
        preencherSelecaoTecnico();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlManutencaoComputadores = new javax.swing.JLabel();
        jlPesquisar = new javax.swing.JLabel();
        jtPesquisar = new javax.swing.JTextField();
        jlTipoPesquisa = new javax.swing.JLabel();
        jrPorNome = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableComputador = new javax.swing.JTable();
        jlNResultados = new javax.swing.JLabel();
        jlResultado = new javax.swing.JLabel();
        jbAtualizar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbImprimir = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jcbSecretaria = new javax.swing.JComboBox();
        jlFiltrosSecretariaSetor = new javax.swing.JLabel();
        jcbSetor = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jcbStatus = new javax.swing.JComboBox();
        jcbData = new javax.swing.JComboBox();
        FiltrosStatusData = new javax.swing.JLabel();
        jcbTecnico = new javax.swing.JComboBox();
        jlComputadoresPorTecnico = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Manutenção de computadores cadastrados");

        jlManutencaoComputadores.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlManutencaoComputadores.setText("Manutenção computadores");

        jlPesquisar.setText("Pesquisar:");

        jtPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtPesquisarKeyReleased(evt);
            }
        });

        jlTipoPesquisa.setText("Tipo de pesquisa:");

        jrPorNome.setSelected(true);
        jrPorNome.setText("Por nome");
        jrPorNome.setEnabled(false);

        jTableComputador.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Secretaria", "Setor", "Contato", "Status", "Data entrada", "Hora entrada", "Técnico"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableComputador.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableComputador);
        if (jTableComputador.getColumnModel().getColumnCount() > 0) {
            jTableComputador.getColumnModel().getColumn(0).setResizable(false);
            jTableComputador.getColumnModel().getColumn(1).setResizable(false);
            jTableComputador.getColumnModel().getColumn(2).setResizable(false);
            jTableComputador.getColumnModel().getColumn(3).setResizable(false);
            jTableComputador.getColumnModel().getColumn(4).setResizable(false);
            jTableComputador.getColumnModel().getColumn(5).setResizable(false);
            jTableComputador.getColumnModel().getColumn(6).setResizable(false);
            jTableComputador.getColumnModel().getColumn(7).setResizable(false);
        }

        jlNResultados.setText("|    N° de resultados:");

        jlResultado.setPreferredSize(new java.awt.Dimension(30, 14));

        jbAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/atualizar.png"))); // NOI18N
        jbAtualizar.setText("Atualizar");
        jbAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtualizarActionPerformed(evt);
            }
        });
        jbAtualizar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbAtualizarKeyPressed(evt);
            }
        });

        jbEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/editar.png"))); // NOI18N
        jbEditar.setText("Editar");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });
        jbEditar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbEditarKeyPressed(evt);
            }
        });

        jbImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/salvar.png"))); // NOI18N
        jbImprimir.setText("PDF");
        jbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirActionPerformed(evt);
            }
        });
        jbImprimir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbImprimirKeyPressed(evt);
            }
        });

        jbExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/excluir.png"))); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });
        jbExcluir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbExcluirKeyPressed(evt);
            }
        });

        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jbCancelar.setText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });
        jbCancelar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbCancelarKeyPressed(evt);
            }
        });

        jcbSecretaria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas secretarias" }));
        jcbSecretaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSecretariaActionPerformed(evt);
            }
        });

        jlFiltrosSecretariaSetor.setText("Filtros secretaria e setor");

        jcbSetor.setEnabled(false);
        jcbSetor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSetorActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jcbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos status", "Aguardando manutenção", "Em manutenção", "Concluído", "Descartado" }));
        jcbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbStatusActionPerformed(evt);
            }
        });

        jcbData.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mais recentes", "Mas antigos", "Última semana", "Último mês" }));
        jcbData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbDataActionPerformed(evt);
            }
        });

        FiltrosStatusData.setText("Filtros status e data");

        jcbTecnico.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Não selecionado" }));
        jcbTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTecnicoActionPerformed(evt);
            }
        });

        jlComputadoresPorTecnico.setText("Computadores por técnico:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlManutencaoComputadores)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jlTipoPesquisa)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jrPorNome)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jlNResultados)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jlResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jlPesquisar)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlFiltrosSecretariaSetor)
                                    .addComponent(jcbSetor, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcbSecretaria, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcbData, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(FiltrosStatusData))
                                .addGap(0, 85, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlComputadoresPorTecnico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(jbAtualizar)
                                .addGap(14, 14, 14)
                                .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(jbCancelar)))))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlManutencaoComputadores)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jlPesquisar)
                                    .addComponent(jtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jlTipoPesquisa)
                                    .addComponent(jrPorNome)
                                    .addComponent(jlNResultados)
                                    .addComponent(jlResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlFiltrosSecretariaSetor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbSecretaria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbSetor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(FiltrosStatusData)
                                .addGap(11, 11, 11)
                                .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(7, 7, 7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAtualizar)
                    .addComponent(jbImprimir)
                    .addComponent(jbExcluir)
                    .addComponent(jbCancelar)
                    .addComponent(jcbTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlComputadoresPorTecnico)
                    .addComponent(jbEditar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*** Métodos da classe ****************************************************/
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 14/01/2015
     */
    private void configurarPermissoes(){
        
        /*** Verificando as permissões e definindo as configurações ***********/
        
        if(per.getEditarComputador() == 0){
            jbEditar.setEnabled(false);
        }//Fecha if.
        
        if(per.getExcluirComputador() == 0){
            jbExcluir.setEnabled(false);
        }//Fecha if.
        
        /*** Fim da verificação das permissões ********************************/
    }//Fecha método configurarPermissoes.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 01/01/2015
     */
    private void construirTabela(){

        //Configurando tabela:
        configurarTabela();
        
        //Enviando modelo da tabela:
        tabela.setModel(modeloTabela);

        //Definindo modelo na interface (inserindo dados):
        jTableComputador.setModel(tabela.getModel());        
    }//Fecha método construirTabela.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 01/01/2015
     */
    private void configurarTabela(){
        
        /*** Padrão para todas as tabelas *************************************/
        
        /* 
           Estes modificadores podem ser usados para configurar a tabela
           conforme as necessidades. Para usá-los devem ser colocados no
           construtor da classe.
        */
        
        //Variáveis para receberem o alinhamento dos dados das colunas:
        //DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
        //DefaultTableCellRenderer centro = new DefaultTableCellRenderer();
        //DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        
        //Definindo posição dos dados:
        //esquerda.setHorizontalAlignment(SwingConstants.LEFT);
        centro.setHorizontalAlignment(SwingConstants.CENTER);
        //direita.setHorizontalAlignment(SwingConstants.RIGHT);
        
        /*** Padrão para todas as tabelas *************************************/

        //Definindo alinhamento dos dados:
        jTableComputador.getColumnModel().getColumn(5).setCellRenderer(centro);
        jTableComputador.getColumnModel().getColumn(6).setCellRenderer(centro);
        
        //Definindo tamanho das colunas:
        jTableComputador.getColumnModel().getColumn(0).setPreferredWidth(110);
        jTableComputador.getColumnModel().getColumn(1).setPreferredWidth(70);
        jTableComputador.getColumnModel().getColumn(2).setPreferredWidth(170);
        jTableComputador.getColumnModel().getColumn(3).setPreferredWidth(110);
        jTableComputador.getColumnModel().getColumn(4).setPreferredWidth(150);
        jTableComputador.getColumnModel().getColumn(5).setPreferredWidth(85);
        jTableComputador.getColumnModel().getColumn(6).setPreferredWidth(85);
        jTableComputador.getColumnModel().getColumn(7).setPreferredWidth(210);
    }//Fecha método configurarTabelaSetor.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 01/01/2015
     */
    private void preencherTabela(){
        
        try {
            
            //Removendo as linha da tabela:
            modeloTabela.setNumRows(0);
            
            //Buscando computadores:
            computador = cs.selecionarComputadores();
            
            //Enviando número de resultados:
            jlResultado.setText(String.valueOf(computador.size()));
            
            //Inserindo dados no modelo da tabela:
            computador.stream().forEach((computador1) -> {
                modeloTabela.addRow(new Object[] {
                          computador1,
                    " " + computador1.getSecretaria(),
                    " " + computador1.getSetor(),
                    " " + computador1.getContato(),
                    " " + computador1.getStatusComputador(),
                    Tratamento.dataParaInterface(computador1.getHistoricoComputador().getDataEntrada().toString()),
                    computador1.getHistoricoComputador().getHoraEntrada(),
                    " " + computador1.getTecnico()
                });
            });//Fim da insersão das linhas na tabela.
            
            //Construindo tabela:
            construirTabela();
            
            //Limpando objetos:
            //computador = null;
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao montar a tabela!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
            
            //Fechando janela:
            cancelar();
        } catch (Exception e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao abrir janela!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
            
            //Fechando janela:
            cancelar();
        }//Fecha catch.
    }//Fecha método preencherTabela.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 15/01/2015
     */
    private void preencherSelecaoSecretaria(){
        
        try {

            //Buscando secretarias:
            secretaria = ss.selecionarSecretarias();
            
            //Inserindo secretarias:
            secretaria.stream().forEach((secretaria1) -> {
                jcbSecretaria.addItem(secretaria1);
            });//Fim da adição das secretarias.   
            
            //Limpando objetos:
            secretaria = null;
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao buscar secretarias!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
            
            //Fechando janela:
            cancelar();
        }//Fecha catch.
    }//Fecha métdodo preencherSelecaoSecretaria.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 15/01/2015
     */
    private void preencherSelecaoSetor(){
        
        try {
            
            //Verificando se o usuário selecionou uma opção:
            if(jcbSecretaria.getSelectedIndex() > 0){
                
                //Removendo intes da caixa de seleção:
                jcbSetor.removeAllItems();
                
                //Adicionando opção padrão:
                jcbSetor.addItem("Todos setores");
                
                //Recebendo a secretaria selecionada:
                sec = (SecretariaVO)jcbSecretaria.getSelectedItem();

                //Buscando setores:
                setor = ses.filtrarSetor("sec.idsecretaria", " = " + sec.getIdSecretaria());
                
                 //Inserindo secretarias:
                setor.stream().forEach((setor1) -> {
                    jcbSetor.addItem(setor1);
                });//Fim da adição dos setores.
                
                //Ativando caixa de seleção:
                jcbSetor.setEnabled(true);
            } else {
                
                //Desativando caixa de seleção:
                jcbSetor.setEnabled(false);
                
                //Removendo intes da caixa de seleção:
                jcbSetor.removeAllItems();
            }//Fecha else.
            
            //Limpando objetos:
            sec = null;
            setor = null;
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao buscar setores!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
            
            //Fechando janela:
            cancelar();
        }//Fecha catch.
    }//Fecha método preencherSelecaoSetor.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 15/01/2015
     */
    private void preencherSelecaoTecnico(){
        
        try {
            
            //Instanciando objeto para acessar o método de busca:
            UsuarioServicos us = ServicosFactory.getUsuarioServicos();
            
            //ArrayList para receber os dados da busca:
            ArrayList<UsuarioVO> usuario;
            
            //Buscando técnicos:
            usuario = us.buscarTecnicos();
            
            //Inserindo técnicos;
            usuario.stream().forEach((usuario1) -> {
                jcbTecnico.addItem(usuario1);
            });//Fim da adição dos técnicos.
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao buscar técnicos!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
            
            //Fechando janela:
            cancelar();
        }//Fecha catch.
    }//Fecha método preencherSelecaoTecnico.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 19/01/2015
     */
    private void filtar(){
        
        try {
            
            //Removendo as linha da tabela:
            modeloTabela.setNumRows(0);
            
            //Validando pesquisa por nome do computador:
            Validacao.validarPesquisaNomeComputador(jtPesquisar.getText());
            
            //Variáveis para receber as pesquisas:
            String pesquisaSecretaria;
            String pesquisaSetor;
            String pesquisaTecnico;
            String pesquisaStatus;
            String pesquisaData = "";
            
            /*** Verificando as opções selecionadas ***************************/
            
            if(jcbSecretaria.getSelectedIndex() == 0){
                
                //Atribuindo valor padão:
                pesquisaSecretaria = "> 0";
            } else {
                
                //Recebendo secretaria selecionada:
                sec = (SecretariaVO)jcbSecretaria.getSelectedItem();
                
                //Enviando pesquisa:
                pesquisaSecretaria = " = " + sec.getIdSecretaria();
            }//Fecha else.
            
            if(jcbSetor.isEnabled()){
                
                if(jcbSetor.getSelectedIndex() == 0){
                
                    //Atribuindo valor padão:
                    pesquisaSetor = "> 0";
                } else {

                    //Recebendo setor selecionado:
                    set = (SetorVO)jcbSetor.getSelectedItem();

                    //Enviando pesquisa:
                    pesquisaSetor = " = " + set.getIdSetor();
                }//Fecha else.
            } else {
                
                //Enviando pesquisa:
                pesquisaSetor = "> 0";
            }//Fecha else.
            
            if(jcbTecnico.getSelectedIndex() == 0){
                
                //Atribuindo valor padão:
                pesquisaTecnico = "> 0";
            } else if(jcbTecnico.getSelectedIndex() == 1){
                
                //Enviando pesquisa:
                pesquisaTecnico = " = 2";
            } else {
                
                //Recebendo técnico selecionado:
                user = (UsuarioVO)jcbTecnico.getSelectedItem();
                
                //Enviando pesquisa:
                pesquisaTecnico = " = " + user.getIdUsuario();
            }//Fecha else.
            
            if(jcbStatus.getSelectedIndex() == 0){
                
                //Enviando opção padrão:
                pesquisaStatus = "is not null";
            } else {
              
                //Recebendo status selecionado:
                pesquisaStatus = "= '" + jcbStatus.getSelectedItem().toString() + "'";
            }//Fecha else.
            
            switch(jcbData.getSelectedIndex()){
                
                case 0:
                    
                    //Pesquisa por mais recentes:
                    pesquisaData = "order by h.dataentrada desc";
                break;
                    
                case 1:
                    
                    //Pesquisa por mais antigos;
                    pesquisaData = "order by h.dataentrada asc";
                break;
                    
                case 2:
                    
                    //Pesquisa pela última semana:
                    pesquisaData = "and h.dataentrada between curdate() - interval 1 week "
                            + "and curdate() order by dataentrada desc";
                break;
                    
                case 3:
                
                    //Pesquisa pelo último mês:
                    pesquisaData = "and h.dataentrada between curdate() - interval 1 month "
                            + "and curdate() order by dataentrada desc";
                break;
            }//Fecha switch.
            
            //Buscando computadores:
            computador = cs.filtrarComputador(jtPesquisar.getText(), pesquisaTecnico, 
                    pesquisaSecretaria, pesquisaSetor, pesquisaStatus, pesquisaData);

            //Enviando número de resultados:
            jlResultado.setText(String.valueOf(computador.size()));
            
            //Inserindo dados no modelo da tabela:
            computador.stream().forEach((computador1) -> {
                modeloTabela.addRow(new Object[] {
                    computador1,
                          computador1.getSecretaria(),
                    " " + computador1.getSetor(),
                    " " + computador1.getContato(),
                    " " + computador1.getStatusComputador(),
                    Tratamento.dataParaInterface(computador1.getHistoricoComputador().getDataEntrada().toString()),
                    computador1.getHistoricoComputador().getHoraEntrada(),
                    " " + computador1.getTecnico()
                });
            });//Fim da insersão das linhas na tabela.
            
            //Construindo tabela:
            construirTabela();
            
            //Limpando objetos:
            sec = null;
            set = null;
            user = null;
            //computador = null;
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao filtar computador!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        } catch (Exception e) {

            /*
                Está gerando uma exception ao selecionar outra secretaria.
            */
        }//Fecha catch.        
    }//Fecha método filtrar.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 29/01/2015
     */
    private void gerarRelatorio(){
        
        try {

            //Gerando relatório:
            Relatorio.gerarRelatorio(computador);
        } catch (FileNotFoundException | DocumentException e) {
            
            /*
                Somente entrará aqui caso o usuário cancele a geração do PDF
            */  
        } catch (Exception e) {

            /*
                Somente entrará aqui caso o usuário cancele a geração do PDF
            */ 
        }//Fecha catch.
    }//Fecha método gerarRelatorio.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 23/01/2015
     */
    private void editar(){
        
        try {
            
            //Variável para receber o número da linha selecionada:
            int linha = jTableComputador.getSelectedRow();

            //Verificando se o usuário selecionou uma linha para edição:
            if (linha == -1) {

                //Mensagem de erro:
                JOptionPane.showMessageDialog(
                    this,
                    "Selecione uma linha para editar!",
                    "Nenhuma linha selecionada",
                    JOptionPane.INFORMATION_MESSAGE);
                //Fim da mensagem de erro.
            } else {

                //Recebendo o objeto da secretaria a ser editado:
                com = (ComputadorVO)jTableComputador.getValueAt(linha, 0);
                
                //Instanciando objeto da classe GUIEditarSecretaria:
                GUIEditarComputador gec = new GUIEditarComputador(null, closable, com.getIdComputador());

                //Tornando a janela visível:
                gec.setVisible(true);
            }//Fecha else.
        } catch (Exception e) {

            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao abrir a edição do computador!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        }//Fecha catch.
    }//Fecha método editar.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 21/01/2015
     */
    private void excluir(){
        
        //Variável para receber o número da linha selecionada:
        int linha = jTableComputador.getSelectedRow();
        
        //Verificando se o usuário selecionou uma linha para edição:
        if (linha == -1) {

            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Selecione uma linha para excluir!",
                "Nenhuma linha selecionada",
                JOptionPane.INFORMATION_MESSAGE);
            //Fim da mensagem de erro.
        } else {
            
            try {

                //Verificando se o usuário deseja mesmo excluir:
                int opcao = JOptionPane.showConfirmDialog(
                        this,
                        "Tem certeza que deseja excluir este computador?",
                        "Confirmar exclusão",
                        JOptionPane.YES_NO_OPTION);
                    //Fim da mensagem de confirmação.

                //Verificando a resposta do usuário:
                if (opcao == 0) {

                    //Recebendo o objeto do computador a ser excluido:
                    com = (ComputadorVO) jTableComputador.getValueAt(linha, 0);

                    //Executando exclusão:
                    cs.excluirComputador(String.valueOf(com.getIdComputador()));
                }//Fecha if.
                
                //Limpando objetos:
                com = null;
            } catch (SQLException e) {
                
                //Mensagem de erro:
                JOptionPane.showMessageDialog(
                    this,
                    "Falha ao deletar computador!",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
                //Fim da mensagem de erro.
            }//Fecha catch.
        }//Fecha else.
    }//Fecha método excluir.
    
        /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 06/01/2015
     */
    private void cancelar(){
        
        //Liberando objetos:
        per = null;
        computador = null;
        secretaria = null;
        setor = null;
        sec = null;
        set = null;
        user = null;
        com = null;
        
        //Fechando a janela:
        dispose();
    }//Fecha método cancelar.
    
    /*** Fim dos métodos da classe ********************************************/
    
    private void jbAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtualizarActionPerformed
        
        //Método preencherTabela:
        preencherTabela();
    }//GEN-LAST:event_jbAtualizarActionPerformed

    private void jbAtualizarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbAtualizarKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            preencherTabela();
        }//Fecha if.
    }//GEN-LAST:event_jbAtualizarKeyPressed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        
        //Método editar:
        editar();
        preencherTabela();
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbEditarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbEditarKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            editar();
            preencherTabela();
        }//Fecha if.
    }//GEN-LAST:event_jbEditarKeyPressed

    private void jbImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimirActionPerformed
        
        //Método gerarRelatorio:
        gerarRelatorio();
    }//GEN-LAST:event_jbImprimirActionPerformed

    private void jbImprimirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbImprimirKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            gerarRelatorio();
        }//Fecha if.
    }//GEN-LAST:event_jbImprimirKeyPressed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        
        //Método excluir:
        excluir();
        preencherTabela();
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbExcluirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbExcluirKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            excluir();
            preencherTabela();
        }//Fecha if.
    }//GEN-LAST:event_jbExcluirKeyPressed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        
        //Método cancelar:
        cancelar();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbCancelarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbCancelarKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            cancelar();
        }//Fecha if.
    }//GEN-LAST:event_jbCancelarKeyPressed

    private void jtPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPesquisarKeyReleased
        
        //Método filtar:
        filtar();
    }//GEN-LAST:event_jtPesquisarKeyReleased

    private void jcbSecretariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSecretariaActionPerformed
        
        //Método preencherSelecaoSetor:
        preencherSelecaoSetor();
        filtar();
    }//GEN-LAST:event_jcbSecretariaActionPerformed

    private void jcbSetorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSetorActionPerformed
        
        //Método filtrar:
        filtar();
    }//GEN-LAST:event_jcbSetorActionPerformed

    private void jcbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbStatusActionPerformed
        
        //Método filtrar:
        filtar();
    }//GEN-LAST:event_jcbStatusActionPerformed

    private void jcbDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbDataActionPerformed
        
        //Método filtrar:
        filtar();
    }//GEN-LAST:event_jcbDataActionPerformed

    private void jcbTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTecnicoActionPerformed
        
        //Método filtrar:
        filtar();
    }//GEN-LAST:event_jcbTecnicoActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FiltrosStatusData;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTableComputador;
    private javax.swing.JButton jbAtualizar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbImprimir;
    private javax.swing.JComboBox jcbData;
    private javax.swing.JComboBox jcbSecretaria;
    private javax.swing.JComboBox jcbSetor;
    private javax.swing.JComboBox jcbStatus;
    private javax.swing.JComboBox jcbTecnico;
    private javax.swing.JLabel jlComputadoresPorTecnico;
    private javax.swing.JLabel jlFiltrosSecretariaSetor;
    private javax.swing.JLabel jlManutencaoComputadores;
    private javax.swing.JLabel jlNResultados;
    private javax.swing.JLabel jlPesquisar;
    private javax.swing.JLabel jlResultado;
    private javax.swing.JLabel jlTipoPesquisa;
    private javax.swing.JRadioButton jrPorNome;
    private javax.swing.JTextField jtPesquisar;
    // End of variables declaration//GEN-END:variables
}
