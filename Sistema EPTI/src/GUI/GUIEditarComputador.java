
package GUI;

import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Time;
import java.util.ArrayList;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.JobName;
import javax.print.attribute.standard.MediaSizeName;
import javax.print.attribute.standard.OrientationRequested;
import javax.swing.JOptionPane;
import modelo.ComputadorVO;
import modelo.HistoricoComputadorVO;
import modelo.SecretariaVO;
import modelo.SetorVO;
import modelo.UsuarioVO;
import servicos.ComputadorServicos;
import servicos.HistoricoComputadorServicos;
import servicos.SecretariaServicos;
import servicos.ServicosFactory;
import servicos.SetorServicos;
import servicos.UsuarioServicos;
import utilidades.DataHora;
import utilidades.Relatorio;
import utilidades.Tratamento;
import utilidades.Validacao;

/**
 * @author Maikel Maciel Rönnau
 * @version 1.0
 * @since 23/01/2015
 */
public class GUIEditarComputador extends javax.swing.JDialog {

    //Varíavel para receber o ID do computador a ser editado:
    private static long idComputador;
    
    //Instanciando objeto para acessar os métodos de serviço:
    private static ComputadorServicos cs = ServicosFactory.getComputadorServicos();
    private static HistoricoComputadorServicos hs = ServicosFactory.getHistoricoComputadorServicos();
            
    //Objetos para receber os dados:
    private static ComputadorVO com = new ComputadorVO();
    private static HistoricoComputadorVO his = new HistoricoComputadorVO();
    
    //Flag para controde de alteração da data/hora de entrada:
    private static boolean flagControleHoraDataEntrada = false;
    
    /**
     * Creates new form GUIEditarComputador
     */
    public GUIEditarComputador(java.awt.Frame parent, boolean modal, long idComputador) {
        super(parent, modal);
        this.idComputador = idComputador;
        initComponents();
        
        //Método para preencher os dados:
        enviarDados();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlEditarComputador = new javax.swing.JLabel();
        jlNome = new javax.swing.JLabel();
        jtNome = new javax.swing.JTextField();
        jlSecretaria = new javax.swing.JLabel();
        jcbSecretaria = new javax.swing.JComboBox();
        jlSetor = new javax.swing.JLabel();
        jcbSetor = new javax.swing.JComboBox();
        jlTecnico = new javax.swing.JLabel();
        jcbTecnico = new javax.swing.JComboBox();
        jlContato = new javax.swing.JLabel();
        jtContato = new javax.swing.JTextField();
        jlTelefone = new javax.swing.JLabel();
        jfTelefone = new javax.swing.JFormattedTextField();
        jlMemorando = new javax.swing.JLabel();
        jfMemorando = new javax.swing.JFormattedTextField();
        jlStatus = new javax.swing.JLabel();
        jcbStatus = new javax.swing.JComboBox();
        jlDataEntrada = new javax.swing.JLabel();
        jlHoraEntrada = new javax.swing.JLabel();
        jlDataConclusao = new javax.swing.JLabel();
        jlHoraConclusao = new javax.swing.JLabel();
        jtHoraConclusao = new javax.swing.JTextField();
        jtDataConclusao = new javax.swing.JTextField();
        jtHoraEntrada = new javax.swing.JTextField();
        jtDataEntrada = new javax.swing.JTextField();
        jlRelatorioManutencao = new javax.swing.JLabel();
        jcLimpeza = new javax.swing.JCheckBox();
        jcBackup = new javax.swing.JCheckBox();
        jcReparacaoSO = new javax.swing.JCheckBox();
        jcInstalacaoSO = new javax.swing.JCheckBox();
        jcSubstituicaoHD = new javax.swing.JCheckBox();
        jcNavegadores = new javax.swing.JCheckBox();
        jcAntivirus = new javax.swing.JCheckBox();
        jcLibreOffice = new javax.swing.JCheckBox();
        jcTrocaDeFonte = new javax.swing.JCheckBox();
        jcDriverPack = new javax.swing.JCheckBox();
        jcWinrarFlash = new javax.swing.JCheckBox();
        jcAdobeReader = new javax.swing.JCheckBox();
        jcConversoresPDF = new javax.swing.JCheckBox();
        jcFirewallCentralSeg = new javax.swing.JCheckBox();
        jcJava = new javax.swing.JCheckBox();
        jcUltraVNC = new javax.swing.JCheckBox();
        jcAtivacaoWindows = new javax.swing.JCheckBox();
        jcDominio = new javax.swing.JCheckBox();
        jcUsuarios = new javax.swing.JCheckBox();
        jcIconesDesktop = new javax.swing.JCheckBox();
        jcMarcarTodos = new javax.swing.JCheckBox();
        jSeparator = new javax.swing.JSeparator();
        jlDescricaoProblema = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaDescricaoProblema = new javax.swing.JTextArea();
        jbCancelar = new javax.swing.JButton();
        jbImprimir = new javax.swing.JButton();
        jbSalvarDados = new javax.swing.JButton();
        jbConverterPDF = new javax.swing.JButton();
        jbGravarHistórico = new javax.swing.JButton();
        jbVerHistorico = new javax.swing.JButton();
        jbRecadastrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edição de computadores");
        setResizable(false);

        jlEditarComputador.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlEditarComputador.setText("Editar computador");

        jlNome.setText("Nome:");

        jlSecretaria.setText("Secretaria:");

        jcbSecretaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSecretariaActionPerformed(evt);
            }
        });

        jlSetor.setText("Setor:");

        jlTecnico.setText("Técnico:");

        jlContato.setText("Contato:");

        jlTelefone.setText("Telefone:");

        try {
            jfTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(51)####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jlMemorando.setText("Memorando:");

        try {
            jfMemorando.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jlStatus.setText("Status:");

        jcbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aguardando manutenção", "Em manutenção", "Concluído", "Descartado" }));
        jcbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbStatusActionPerformed(evt);
            }
        });

        jlDataEntrada.setText("Data entrada:");

        jlHoraEntrada.setText("Hora entrada:");

        jlDataConclusao.setText("Data consluão:");

        jlHoraConclusao.setText("Hora conclusão:");

        jtHoraConclusao.setEditable(false);
        jtHoraConclusao.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jtDataConclusao.setEditable(false);
        jtDataConclusao.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jtHoraEntrada.setEditable(false);
        jtHoraEntrada.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jtDataEntrada.setEditable(false);
        jtDataEntrada.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jlRelatorioManutencao.setText("Relatório de manutenção:");

        jcLimpeza.setText("Limpeza");

        jcBackup.setText("Backup");

        jcReparacaoSO.setText("Reparação S.O.");

        jcInstalacaoSO.setText("Instalação S.O.");

        jcSubstituicaoHD.setText("Substituição HD");

        jcNavegadores.setText("Navegadores");

        jcAntivirus.setText("Antivírus");

        jcLibreOffice.setText("Libre Office");

        jcTrocaDeFonte.setText("Troca de fonte");

        jcDriverPack.setText("Driver Pack");

        jcWinrarFlash.setText("Winrar/Flash Player");

        jcAdobeReader.setText("Adobe Reader");

        jcConversoresPDF.setText("Conversores PDF");

        jcFirewallCentralSeg.setText("Firewall/Central Seg.");

        jcJava.setText("Java");

        jcUltraVNC.setText("UltraVNC");

        jcAtivacaoWindows.setText("Ativação Windows");

        jcDominio.setText("Domínio");

        jcUsuarios.setText("Usuários");

        jcIconesDesktop.setText("Ícones desktop");

        jcMarcarTodos.setText("Marcar todos");
        jcMarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcMarcarTodosActionPerformed(evt);
            }
        });

        jSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jlDescricaoProblema.setText("Descrição/problema:");

        jtaDescricaoProblema.setColumns(20);
        jtaDescricaoProblema.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jtaDescricaoProblema.setLineWrap(true);
        jtaDescricaoProblema.setRows(5);
        jtaDescricaoProblema.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jtaDescricaoProblema);

        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jbCancelar.setText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });
        jbCancelar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbCancelarKeyPressed(evt);
            }
        });

        jbImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/imprimir.png"))); // NOI18N
        jbImprimir.setText("Imprimir");
        jbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirActionPerformed(evt);
            }
        });
        jbImprimir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbImprimirKeyPressed(evt);
            }
        });

        jbSalvarDados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirmar.png"))); // NOI18N
        jbSalvarDados.setText("Salvar dados");
        jbSalvarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarDadosActionPerformed(evt);
            }
        });
        jbSalvarDados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbSalvarDadosKeyPressed(evt);
            }
        });

        jbConverterPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/salvar.png"))); // NOI18N
        jbConverterPDF.setText("Converter PDF");
        jbConverterPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConverterPDFActionPerformed(evt);
            }
        });
        jbConverterPDF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbConverterPDFKeyPressed(evt);
            }
        });

        jbGravarHistórico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/gravar.png"))); // NOI18N
        jbGravarHistórico.setText("Gravar Histórico");
        jbGravarHistórico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGravarHistóricoActionPerformed(evt);
            }
        });
        jbGravarHistórico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbGravarHistóricoKeyPressed(evt);
            }
        });

        jbVerHistorico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/verhistorico.png"))); // NOI18N
        jbVerHistorico.setText("Ver histórico");
        jbVerHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVerHistoricoActionPerformed(evt);
            }
        });
        jbVerHistorico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbVerHistoricoKeyPressed(evt);
            }
        });

        jbRecadastrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/atualizar.png"))); // NOI18N
        jbRecadastrar.setEnabled(false);
        jbRecadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRecadastrarActionPerformed(evt);
            }
        });
        jbRecadastrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbRecadastrarKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlEditarComputador))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jlNome)
                                        .addGap(40, 40, 40)
                                        .addComponent(jtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(jlSecretaria)
                                                    .addGap(18, 18, 18))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jlSetor)
                                                    .addGap(41, 41, 41)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jlTecnico)
                                                    .addGap(31, 31, 31))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(jlStatus)
                                                    .addGap(36, 36, 36))))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jcbTecnico, 0, 200, Short.MAX_VALUE)
                                            .addComponent(jcbSetor, 0, 200, Short.MAX_VALUE)
                                            .addComponent(jcbSecretaria, 0, 200, Short.MAX_VALUE)
                                            .addComponent(jcbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jlContato)
                                        .addGap(28, 28, 28)
                                        .addComponent(jtContato, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlHoraConclusao)
                                    .addComponent(jlDataConclusao)
                                    .addComponent(jlHoraEntrada)
                                    .addComponent(jlDataEntrada)
                                    .addComponent(jlMemorando)
                                    .addComponent(jlTelefone))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jtHoraEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                                        .addComponent(jtDataConclusao)
                                        .addComponent(jtHoraConclusao)
                                        .addComponent(jfMemorando, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                                        .addComponent(jtDataEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                                    .addComponent(jfTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jcInstalacaoSO)
                                            .addComponent(jcSubstituicaoHD)
                                            .addComponent(jcReparacaoSO)
                                            .addComponent(jcBackup)
                                            .addComponent(jcLimpeza))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jcDriverPack)
                                            .addComponent(jcNavegadores)
                                            .addComponent(jcAntivirus)
                                            .addComponent(jcLibreOffice)
                                            .addComponent(jcTrocaDeFonte))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jcConversoresPDF)
                                            .addComponent(jcFirewallCentralSeg)
                                            .addComponent(jcJava)
                                            .addComponent(jcAdobeReader)
                                            .addComponent(jcWinrarFlash)))
                                    .addComponent(jlRelatorioManutencao))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcMarcarTodos)
                                    .addComponent(jcIconesDesktop)
                                    .addComponent(jcUsuarios)
                                    .addComponent(jcDominio)
                                    .addComponent(jcAtivacaoWindows)
                                    .addComponent(jcUltraVNC))))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbConverterPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbRecadastrar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbSalvarDados, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbVerHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbGravarHistórico)))
                        .addGap(80, 80, 80))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jlDescricaoProblema)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlEditarComputador)
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlNome)
                                            .addComponent(jtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlSecretaria)
                                            .addComponent(jcbSecretaria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlSetor)
                                            .addComponent(jcbSetor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlTecnico)
                                            .addComponent(jcbTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlStatus)
                                            .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlContato)
                                            .addComponent(jtContato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlDataEntrada)
                                            .addComponent(jtDataEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlHoraEntrada)
                                            .addComponent(jtHoraEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlDataConclusao)
                                            .addComponent(jtDataConclusao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlHoraConclusao)
                                            .addComponent(jtHoraConclusao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlMemorando)
                                            .addComponent(jfMemorando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlTelefone)
                                            .addComponent(jfTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jlRelatorioManutencao)
                                                .addGap(25, 25, 25)
                                                .addComponent(jcLimpeza)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcBackup)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcReparacaoSO)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcInstalacaoSO)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcSubstituicaoHD))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jcDriverPack)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcTrocaDeFonte)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcLibreOffice)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcAntivirus)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcNavegadores))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jcJava)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcAdobeReader)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcWinrarFlash)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcConversoresPDF)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jcFirewallCentralSeg))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jcMarcarTodos)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jcUsuarios)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jcDominio)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jcUltraVNC)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jcAtivacaoWindows)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jcIconesDesktop))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlDescricaoProblema)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jbConverterPDF)
                                    .addComponent(jbGravarHistórico)
                                    .addComponent(jbVerHistorico))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jbCancelar)
                                    .addComponent(jbSalvarDados)
                                    .addComponent(jbImprimir)
                                    .addComponent(jbRecadastrar))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /*** Métodos da classe ****************************************************/
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 15/01/2015
     */
    private void preencherSelecaoSecretaria(long idSecretaria){
        
        try {
            
            //Instanciando objeto para acessar o método de busca:
            SecretariaServicos ss = ServicosFactory.getSecretariaServicos();
            
            //ArrayList para receber os dados da busca:
            ArrayList<SecretariaVO> secretaria;
            
            //Buscando secretarias:
            secretaria = ss.buscarDemaisSecretarias(idSecretaria);
            
            //Inserindo secretarias:
            secretaria.stream().forEach((secretaria1) -> {
                jcbSecretaria.addItem(secretaria1);
            });//Fim da adição das secretarias.
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao buscar demais secretarias!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
            
            //Fechando janela:
            cancelar();
        }//Fecha catch.
    }//Fecha métdodo preencherSelecaoSecretaria.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 15/01/2015
     */
    private void preencherSelecaoSetor(long idSecretaria, SetorVO set){
        
        try {
            
            //Removento todos os itens da caixa de seleção:
            jcbSetor.removeAllItems();
            
            //Enviando setor do computador
            jcbSetor.addItem(set);

            //Instanciando objeto para acessar o método de busca:
            SetorServicos ss = ServicosFactory.getSetorServicos();

            //ArrayList para receber os dados da busca:
            ArrayList<SetorVO> setor;

            //Buscando setores:
            setor = ss.buscarDemaisSetores(idSecretaria);

            //Inserindo secretarias:
            setor.stream().forEach((setor1) -> {
                jcbSetor.addItem(setor1);
            });//Fim da adição dos setores.

            //Ativando caixa de seleção:
            jcbSetor.setEnabled(true);
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao buscar demais setores!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
            
            //Fechando janela:
            cancelar();
        }//Fecha catch.
    }//Fecha método preencherSelecaoSetor.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 15/01/2015
     */
    private void preencherSelecaoSetor(){
        
        try {
            
            //Verificando se o usuário selecionou uma opção:
            if(jcbSecretaria.getSelectedIndex() > 0){
                
                //Removendo intes da caixa de seleção:
                jcbSetor.removeAllItems();
                
                //Variável para receber a secretaria selecionada:
                SecretariaVO sec;
                
                //Recebendo a secretaria selecionada:
                sec = (SecretariaVO)jcbSecretaria.getSelectedItem();
                
                //Instanciando objeto para acessar o método de busca:
                SetorServicos ss = ServicosFactory.getSetorServicos();

                //ArrayList para receber os dados da busca:
                ArrayList<SetorVO> setor;

                //Buscando setores:
                setor = ss.filtrarSetor("sec.idsecretaria", " = " + sec.getIdSecretaria());
                
                 //Inserindo secretarias:
                setor.stream().forEach((setor1) -> {
                    jcbSetor.addItem(setor1);
                });//Fim da adição dos setores.
                
                //Ativando caixa de seleção:
                jcbSetor.setEnabled(true);
            } else {
                
                //Desativando caixa de seleção:
                jcbSetor.setEnabled(false);
                
                //Removendo intes da caixa de seleção:
                jcbSetor.removeAllItems();
            }//Fecha else.
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao buscar setores!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
            
            //Fechando janela:
            cancelar();
        }//Fecha catch.
    }//Fecha método preencherSelecaoSetor.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 15/01/2015
     */
    private void preencherSelecaoTecnico(long idUsuario){
        
        try {
            
            //Instanciando objeto para acessar o método de busca:
            UsuarioServicos us = ServicosFactory.getUsuarioServicos();
            
            //ArrayList para receber os dados da busca:
            ArrayList<UsuarioVO> usuario;
            
            //Buscando técnicos:
            usuario = us.buscarDemaisTecnicos(idUsuario);
            
            //Inserindo técnicos;
            usuario.stream().forEach((usuario1) -> {
                jcbTecnico.addItem(usuario1);
            });//Fim da adição dos técnicos.
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao buscar demais técnicos!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
            
            //Fechando janela:
            cancelar();
        }//Fecha catch.
    }//Fecha método preencherSelecaoTecnico.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 23/01/2015
     */
    private void enviarDados(){
        
        try {
            
            //Novo objeto para receber os dados do computador:
            com = new ComputadorVO();
            
            //Objeto recebendo os dados da busca:
            com = cs.buscarComputadorParaEdicao(idComputador);
            
            //Enviando histórico para o objeto:
            his = com.getHistoricoComputador();
            
            //Enviando dados para a interface:
            jcbSecretaria.addItem(com.getSecretaria());
            preencherSelecaoSecretaria(com.getSecretaria().getIdSecretaria());
            preencherSelecaoSetor(com.getSecretaria().getIdSecretaria(), com.getSetor());            
            jcbTecnico.addItem(com.getTecnico());
            preencherSelecaoTecnico(com.getTecnico().getIdUsuario());
            jcbStatus.setSelectedItem(com.getStatusComputador());
            jtContato.setText(com.getContato());
            jtDataEntrada.setText(Tratamento.dataParaInterface(com.getHistoricoComputador().getDataEntrada().toString()));
            jtHoraEntrada.setText(com.getHistoricoComputador().getHoraEntrada().toString());
            jtaDescricaoProblema.setText(com.getDescricaoComputador());
            jtNome.setText(com.getNomeComputador());

            //Verificando envio do telefone:
            if(!com.getTelefone().equals("(51)    -    ")){
                
                //Enviando telefone:
                jfTelefone.setText(com.getTelefone());
            }//Fecha if.
            
            //Verificando envio do memorando:
            if(!com.getMemorandoComputador().equals("    /    ")){
                
                //Enviando memorando:
                jfMemorando.setText(com.getMemorandoComputador());
            }//Fecha if.
            
            //Verificando se a data de conclusão existe:
            if(com.getHistoricoComputador().getDataConclusao() != null){
                
                //Enviando data de conclusão para a interface:
                jtDataConclusao.setText(Tratamento.dataParaInterface(his.getDataConclusao().toString()));
            }//Fecha if
            
            //Verificando se a hora de conclusão existe:
            if(com.getHistoricoComputador().getHoraConclusao() != null){
                
                //Enviando hora de conclusão para a interface:
                jtHoraConclusao.setText(his.getHoraConclusao().toString());
            }//Fecha if
            
            //Enviando dados do relatório de manutenção:
            if(com.getHistoricoComputador().getLimpeza() == 1){
                
                jcLimpeza.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getBackup() == 1){
                
                jcBackup.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getReparacaoso() == 1){
                
                jcReparacaoSO.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getInstalacaoso() == 1){
                
                jcInstalacaoSO.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getSubstituicaoHd() == 1){
                
                jcSubstituicaoHD.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getDriverPack() == 1){
                
                jcDriverPack.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getTrocaDeFonte() == 1){
                
                jcTrocaDeFonte.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getLibreOffice() == 1){
                
                jcLibreOffice.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getAntivirus() == 1){
                
                jcAntivirus.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getNavegadores() == 1){
                
                jcNavegadores.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getJava() == 1){
                
                jcJava.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getAdobereader() == 1){
                
                jcAdobeReader.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getWinrarFlash() == 1){
                
                jcWinrarFlash.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getConversoresPdf() == 1){
                
                jcConversoresPDF.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getFirewallCentralSeg() == 1){
                
                jcFirewallCentralSeg.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getUsuarios() == 1){
                
                jcUsuarios.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getDominio() == 1){
                
                jcDominio.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getUltravnc() == 1){
                
                jcUltraVNC.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getAtivacaoWindows() == 1){
                
                jcAtivacaoWindows.setSelected(true);
            }//Fecha if.
            
            if(com.getHistoricoComputador().getIcones() == 1){
                
                jcIconesDesktop.setSelected(true);
            }//Fecha if.
            
            //Definindo foco:
            jtNome.grabFocus();
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao buscar os dados do computador!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        } catch (Exception e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao preencher dados do computador!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        }//Fecha catch.        
    }//Fecha método enviarDados.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 24/01/2015
     */
    private void salvar(){
        
        try {
         
            //Validando dados:
            Validacao.validarNomeComputador(jtNome.getText());
            Validacao.validarSigla(jcbSecretaria.getSelectedItem().toString());
            Validacao.validarNomeSiglaSetor(jcbSetor.getSelectedItem().toString());
            Validacao.validarNomeProprio(jcbTecnico.getSelectedItem().toString());
            Validacao.validarPesquisaNomeProprio(jtContato.getText());
            //Validacao.validarDescricaoComputador(jtaDescricaoProblema.getText());
            
            /*** Enviando dados para o histórico ******************************/
            
            if(jcLimpeza.isSelected()){
                his.setLimpeza((byte)1);
            } else {
                his.setLimpeza((byte)0);
            }//Fecha else.
            
            if(jcBackup.isSelected()){
                his.setBackup((byte)1);
            } else {
                his.setBackup((byte)0);
            }//Fecha else.
            
            if(jcReparacaoSO.isSelected()){
                his.setReparacaoso((byte)1);
            } else {
                his.setReparacaoso((byte)0);
            }//Fecha else.
            
            if(jcInstalacaoSO.isSelected()){
                his.setInstalacaoso((byte)1);
            } else {
                his.setInstalacaoso((byte)0);
            }//Fecha else.
            
            if(jcSubstituicaoHD.isSelected()){
                his.setSubstituicaoHd((byte)1);
            } else {
                his.setSubstituicaoHd((byte)0);
            }//Fecha else.
            
            if(jcDriverPack.isSelected()){
                his.setDriverPack((byte)1);
            } else {
                his.setDriverPack((byte)0);
            }//Fecha else.
            
            if(jcTrocaDeFonte.isSelected()){
                his.setTrocaDeFonte((byte)1);
            } else {
                his.setTrocaDeFonte((byte)0);
            }//Fecha else.
            
            if(jcLibreOffice.isSelected()){
                his.setLibreOffice((byte)1);
            } else {
                his.setLibreOffice((byte)0);
            }//Fecha else.
            
            if(jcAntivirus.isSelected()){
                his.setAntivirus((byte)1);
            } else {
                his.setAntivirus((byte)0);
            }//Fecha else.
            
            if(jcNavegadores.isSelected()){
                his.setNavegadores((byte)1);
            } else {
                his.setNavegadores((byte)0);
            }//Fecha else.
            
            if(jcJava.isSelected()){
                his.setJava((byte)1);
            } else {
                his.setJava((byte)0);
            }//Fecha else.
            
            if(jcAdobeReader.isSelected()){
                his.setAdobereader((byte)1);
            } else {
                his.setAdobereader((byte)0);
            }//Fecha else.
            
            if(jcWinrarFlash.isSelected()){
                his.setWinrarFlash((byte)1);
            } else {
                his.setWinrarFlash((byte)0);
            }//Fecha else.
            
            if(jcConversoresPDF.isSelected()){
                his.setConversoresPdf((byte)1);
            } else {
                his.setConversoresPdf((byte)0);
            }//Fecha else.
            
            if(jcFirewallCentralSeg.isSelected()){
                his.setFirewallCentralSeg((byte)1);
            } else {
                his.setFirewallCentralSeg((byte)0);
            }//Fecha else.
            
            if(jcUsuarios.isSelected()){
                his.setUsuarios((byte)1);
            } else {
                his.setUsuarios((byte)0);
            }//Fecha else.
            
            if(jcDominio.isSelected()){
                his.setDominio((byte)1);
            } else {
                his.setDominio((byte)0);
            }//Fecha else.
            
            if(jcUltraVNC.isSelected()){
                his.setUltravnc((byte)1);
            } else {
                his.setUltravnc((byte)0);
            }//Fecha else.
            
            if(jcAtivacaoWindows.isSelected()){
                his.setAtivacaoWindows((byte)1);
            } else {
                his.setAtivacaoWindows((byte)0);
            }//Fecha else.
            
            if(jcIconesDesktop.isSelected()){
                his.setIcones((byte)1);
            } else {
                his.setIcones((byte)0);
            }//Fecha else.
            
            //Verificando a data/horário de conclusão devem ser inseridos:
            if(jcbStatus.getSelectedIndex() == 2 | jcbStatus.getSelectedIndex() == 3 
                    && (!jcbStatus.getSelectedItem().equals(com.getStatusComputador()) )){
                
                //Enviando comando para preencher a data/horário de conclusão:
                his.setDataConclusao(Date.valueOf(DataHora.capturarDataBancoDeDados()));
                his.setHoraConclusao(Time.valueOf(DataHora.capturarHora()));
                
                //Enviando para a interface:
                jtDataConclusao.setText(DataHora.capturarData());
                jtHoraConclusao.setText(DataHora.capturarHora());
            }//Fecha if.

            //Atualizando histórico:
            hs.atualizarHistoricoComputador(his);
            
            /*** Enviando dados para o computador *****************************/
            
            //Enviando dados para o computador:
            com.setNomeComputador(jtNome.getText());
            com.setSecretaria((SecretariaVO)jcbSecretaria.getSelectedItem());
            com.setSetor((SetorVO)jcbSetor.getSelectedItem());
            com.setTecnico((UsuarioVO)jcbTecnico.getSelectedItem());
            com.setStatusComputador(jcbStatus.getSelectedItem().toString());
            com.setContato(jtContato.getText());
            com.setTelefone(jfTelefone.getText());
            com.setMemorandoComputador(jfMemorando.getText());
            
            //Adicionando informações de cadastro à descrição:
            jtaDescricaoProblema.setText(jtaDescricaoProblema.getText() 
                + "\n\nAlterações em: " + DataHora.capturarData() 
                + " - " + DataHora.capturarHora() + " - " + GUIMenu.loginUsuario 
                + "\n----------------------------------------------------------"
                + "------------------------------------------------------------"
                + "---\n\n");
            
            //Enviando ID do computador:
            com.setIdComputador(idComputador);
            
            //Enviando descrição:
            com.setDescricaoComputador(jtaDescricaoProblema.getText());
            
            //Atualizando computador:
            cs.atualizarComputador(com);
            
            //Alterando valor da flag de controle:
            flagControleHoraDataEntrada = false;
            
            //Mensagem de confirmação:
            JOptionPane.showMessageDialog(
                this,
                "Computador atualizado com sucesso!",
                "Atualização concluída",
                JOptionPane.INFORMATION_MESSAGE);
            //Fim da mensagem de confirmação.
        } catch (SQLException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao atualizar computador! "
              + "\n\n" + e.getMessage(),
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        } catch (Exception e) {

            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                e.getMessage(),
                "Erro",
                JOptionPane.WARNING_MESSAGE);
            //Fim da mensagem de erro.
        }//Fecha catch.
    }//Fecha método salvar.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 26/01/2015
     */
    private void gravarHistorico(){
        
        try {

            //Verificando se a descrição está vazia:
            if(!jtaDescricaoProblema.getText().isEmpty()){

                //Verificando se o computado já possúi um histórico:
                if(his.getHistoricoComputador() == null){

                    //Enviando novo histórico e o técnico:
                    his.setHistoricoComputador("Técnico de manutenção: " + com.getTecnico().getNomeUsuario() + "\n\n"
                            + jtaDescricaoProblema.getText());
                } else {

                    //Acrescentado histório novo ao já existente:
                    his.setHistoricoComputador("Técnico de manutenção: " + com.getTecnico().getNomeUsuario() + "\n\n"
                            + jtaDescricaoProblema.getText() + his.getHistoricoComputador());
                }//Fecha else.

                //Atualizando histórico:
                hs.atualizarHistorico(his);

                //Mensagem de confirmação:
                JOptionPane.showMessageDialog(
                    this,
                    "Histórico gravado com sucesso!",
                    "Gravação concluída",
                    JOptionPane.INFORMATION_MESSAGE);
                //Fim da mensagem de confirmação.
            } else {
                
                //Mensagem de erro::
            JOptionPane.showMessageDialog(
                this,
                "Para gravar o histórico a descrição não pode estar vazia!",
                "Erro",
                JOptionPane.WARNING_MESSAGE);
            //Fim da mensagem de erro.
            }//Fecha if.
        } catch (SQLException e) {
            
            //Mensagem de erro::
            JOptionPane.showMessageDialog(
                this,
                "Falha ao gravar histórico!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        } catch (HeadlessException e){
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                e.getMessage(),
                "Erro",
                JOptionPane.WARNING_MESSAGE);
            //Fim da mensagem de erro.
        }//Fecha catch.
    }//Fecha método gravarHistorico.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 26/01/2015
     */
    private void abrirGUIHistoricoComputador(){
        
        try {
            
            //Instanciando objeto da classe GUIHistoricoComputador:
            GUIHistoricoComputador ghc = new GUIHistoricoComputador(null, true, his.getIdHistoricoComputador(),
            his.getHistoricoComputador(), com.getNomeComputador());
            
            //Tornando o objeto visível:
            ghc.setVisible(true);
        } catch (Exception e) {
            
            //Mensagem de erro::
            JOptionPane.showMessageDialog(
                this,
                "Erro ao abrir o histórico do computador!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        }//Fecha catch.
    }//Fecha método abrirGUIHistoricoComputador.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 27/01/2015
     */
    private void recadastrar(){
        
        try {
            
            //Removendo itens da caixa de status:
            jcbStatus.removeAllItems();
            
            //Enviando opções de status para recadastro:
            jcbStatus.addItem("Aguardando manutenção");
            jcbStatus.addItem("Em manutenção");
            
            //Removendo informações:
            jcbTecnico.setSelectedIndex(jcbTecnico.getItemCount()-1);
            jtDataConclusao.setText(null);
            jtHoraConclusao.setText(null);
            jfMemorando.setText(null);
            jtaDescricaoProblema.setText(null);
            
            //Atualizando data e hora de entrada:
            jtDataEntrada.setText(DataHora.capturarData());
            jtHoraEntrada.setText(DataHora.capturarHora());
            
            //Enviando data e hora de entrada para o objeto:
            his.setDataEntrada(Date.valueOf(DataHora.capturarDataBancoDeDados()));
            his.setHoraEntrada(Time.valueOf(DataHora.capturarHora()));
            
            //Removendo data e hora de conclusão do objeto:
            his.setDataConclusao(null);
            his.setHoraConclusao(null);
            
            //Alterando o valor da flag:
            flagControleHoraDataEntrada = true;
            
            //Desmarcando caixas do relatório:
            jcMarcarTodos.setSelected(false);
            marcarDesmarcarRelatorio();
        } catch (Exception e) {
            
            //Mensagem de erro::
            JOptionPane.showMessageDialog(
                this,
                "Falha ao preparar recadastro do computador!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        }//Fecha catch.
    }//Fecha método recadastrar.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 29/01/2015
     */
    private void gerarRelatorioComputador(){
        
        try {
            
            //Gerando relatório de manutenção:
            Relatorio.gerarRelatorioManutencao(com);
        } catch (Exception e) {
            
            /*
                Somente entrará aqui caso o usuário cancele a geração do PDF
            */ 
        }//Fecha catch.
    }//Fecha método geraraRelatorioComputador.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 31/01/2015
     */
    private void imprimirRelatorio(){
        
        try {
            
            //Gerando arquivo do relatório:
            Relatorio.imprimirRelatorioManutencao(com);
            
            //Instanciando entrada do arquivo:
            InputStream inst = new FileInputStream(new File("relatorios/rel_man_to_print.pdf"));
                
            //Instanciando gerenciador do arquivo:
            DocFlavor docFlavor = DocFlavor.INPUT_STREAM.AUTOSENSE;

            //Instanciando novo documento para impressão:
            SimpleDoc documentoTexto = new SimpleDoc(inst, docFlavor, null);

            //Instanciando impressora padrão:
            PrintService impressora = PrintServiceLookup.lookupDefaultPrintService();

            //Recebendo atributos da impressora:
            PrintRequestAttributeSet printerAttributes = new HashPrintRequestAttributeSet();

            //Nome do trabalho:
            printerAttributes.add(new JobName("rel_man_to_print.pdf", null));

            //Requição da impressão:
            printerAttributes.add(OrientationRequested.PORTRAIT);

            //Tamanho da folha de impressão:
            printerAttributes.add(MediaSizeName.ISO_A4);

            //Criando trabalho:
            DocPrintJob printJob = impressora.createPrintJob();
            
            //Imprimindo documento:
            printJob.print(documentoTexto, (PrintRequestAttributeSet) printerAttributes);
            
            //Mensagem de confirmação:
            JOptionPane.showMessageDialog(
                this,
                "Relatório impresso com sucesso!",
                "Impressão concluída",
                JOptionPane.INFORMATION_MESSAGE);
            //Fim da mensagem de erro.
        } catch (FileNotFoundException | PrintException e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Não foi possível imprimir o relatório! " + e.getMessage(),
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        }//Fecha catch.
    }//Fecha método imprimirRelatorio.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 24/01/2015
     */
    private void marcarDesmarcarRelatorio(){
        
        //Verificando se as caixas devem ser marcadas:
        if(jcMarcarTodos.isSelected()){
         
            //Desmarcando as caixas:
            jcLimpeza.setSelected(true);
            jcBackup.setSelected(true);
            jcReparacaoSO.setSelected(true);
            jcInstalacaoSO.setSelected(true);
            jcSubstituicaoHD.setSelected(true);
            jcDriverPack.setSelected(true);
            jcTrocaDeFonte.setSelected(true);
            jcLibreOffice.setSelected(true);
            jcAntivirus.setSelected(true);
            jcNavegadores.setSelected(true);
            jcJava.setSelected(true);
            jcAdobeReader.setSelected(true);
            jcAdobeReader.setSelected(true);
            jcWinrarFlash.setSelected(true);
            jcConversoresPDF.setSelected(true);
            jcFirewallCentralSeg.setSelected(true);
            jcUsuarios.setSelected(true);
            jcDominio.setSelected(true);
            jcUltraVNC.setSelected(true);
            jcAtivacaoWindows.setSelected(true);
            jcIconesDesktop.setSelected(true);
        } else {
            
            //Desmarcando as caixas:
            jcLimpeza.setSelected(false);
            jcBackup.setSelected(false);
            jcReparacaoSO.setSelected(false);
            jcInstalacaoSO.setSelected(false);
            jcSubstituicaoHD.setSelected(false);
            jcDriverPack.setSelected(false);
            jcTrocaDeFonte.setSelected(false);
            jcLibreOffice.setSelected(false);
            jcAntivirus.setSelected(false);
            jcNavegadores.setSelected(false);
            jcJava.setSelected(false);
            jcAdobeReader.setSelected(false);
            jcAdobeReader.setSelected(false);
            jcWinrarFlash.setSelected(false);
            jcConversoresPDF.setSelected(false);
            jcFirewallCentralSeg.setSelected(false);
            jcUsuarios.setSelected(false);
            jcDominio.setSelected(false);
            jcUltraVNC.setSelected(false);
            jcAtivacaoWindows.setSelected(false);
            jcIconesDesktop.setSelected(false);
        }//Fecha if.
    }//Fecha método marcarDesmarcarRelatorio.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 06/01/2015
     */
    private void cancelar(){
        
        //Fechando a janela:
        dispose();
    }//Fecha método cancelar.
    
    /*** Fim dos métodos da classe ********************************************/
    
    private void jbSalvarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarDadosActionPerformed
        
        //Método salvar:
        salvar();
    }//GEN-LAST:event_jbSalvarDadosActionPerformed

    private void jbSalvarDadosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbSalvarDadosKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            salvar();
        }//Fecha if.
    }//GEN-LAST:event_jbSalvarDadosKeyPressed

    private void jbConverterPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConverterPDFActionPerformed
        
        //Método geraraRelatorioComputador:
        gerarRelatorioComputador();
    }//GEN-LAST:event_jbConverterPDFActionPerformed

    private void jbConverterPDFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbConverterPDFKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            gerarRelatorioComputador();
        }//Fecha if.
    }//GEN-LAST:event_jbConverterPDFKeyPressed

    private void jbImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimirActionPerformed
        
        //Método imprimirRelatorio:
        imprimirRelatorio();
    }//GEN-LAST:event_jbImprimirActionPerformed

    private void jbImprimirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbImprimirKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            imprimirRelatorio();
        }//Fecha if.
    }//GEN-LAST:event_jbImprimirKeyPressed

    private void jbVerHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVerHistoricoActionPerformed
        
        //Método abrirGUIHistoricoComputador:
        abrirGUIHistoricoComputador();
    }//GEN-LAST:event_jbVerHistoricoActionPerformed

    private void jbVerHistoricoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbVerHistoricoKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUIHistoricoComputador();
        }//Fecha if.
    }//GEN-LAST:event_jbVerHistoricoKeyPressed

    private void jbGravarHistóricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGravarHistóricoActionPerformed
        
        //Método gravarHistorico:
        gravarHistorico();
    }//GEN-LAST:event_jbGravarHistóricoActionPerformed

    private void jbGravarHistóricoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbGravarHistóricoKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            gravarHistorico();
        }//Fecha if.
    }//GEN-LAST:event_jbGravarHistóricoKeyPressed

    private void jbRecadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRecadastrarActionPerformed
        
        //Método recadastrar:
        recadastrar();
    }//GEN-LAST:event_jbRecadastrarActionPerformed

    private void jbRecadastrarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbRecadastrarKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            recadastrar();
        }//Fecha if.
    }//GEN-LAST:event_jbRecadastrarKeyPressed

    private void jcbSecretariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSecretariaActionPerformed
        
        //Método preencherSelecaoSetor:
        preencherSelecaoSetor();
    }//GEN-LAST:event_jcbSecretariaActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        
        //Método cancelar:
        cancelar();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbCancelarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbCancelarKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            cancelar();
        }//Fecha if.
    }//GEN-LAST:event_jbCancelarKeyPressed

    private void jcMarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcMarcarTodosActionPerformed
        
        //Método marcarDesmarcarRelatorio:
        marcarDesmarcarRelatorio();
    }//GEN-LAST:event_jcMarcarTodosActionPerformed

    private void jcbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbStatusActionPerformed
        
        //Ativando o botão para recadastrar o computador:
        if(jcbStatus.getSelectedIndex() == 2){
            
            //Ativando botão:
            jbRecadastrar.setEnabled(true);
        }//Fecha if.
    }//GEN-LAST:event_jcbStatusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIEditarComputador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIEditarComputador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIEditarComputador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIEditarComputador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUIEditarComputador dialog = new GUIEditarComputador(new javax.swing.JFrame(), true, 0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbConverterPDF;
    private javax.swing.JButton jbGravarHistórico;
    private javax.swing.JButton jbImprimir;
    private javax.swing.JButton jbRecadastrar;
    private javax.swing.JButton jbSalvarDados;
    private javax.swing.JButton jbVerHistorico;
    private javax.swing.JCheckBox jcAdobeReader;
    private javax.swing.JCheckBox jcAntivirus;
    private javax.swing.JCheckBox jcAtivacaoWindows;
    private javax.swing.JCheckBox jcBackup;
    private javax.swing.JCheckBox jcConversoresPDF;
    private javax.swing.JCheckBox jcDominio;
    private javax.swing.JCheckBox jcDriverPack;
    private javax.swing.JCheckBox jcFirewallCentralSeg;
    private javax.swing.JCheckBox jcIconesDesktop;
    private javax.swing.JCheckBox jcInstalacaoSO;
    private javax.swing.JCheckBox jcJava;
    private javax.swing.JCheckBox jcLibreOffice;
    private javax.swing.JCheckBox jcLimpeza;
    private javax.swing.JCheckBox jcMarcarTodos;
    private javax.swing.JCheckBox jcNavegadores;
    private javax.swing.JCheckBox jcReparacaoSO;
    private javax.swing.JCheckBox jcSubstituicaoHD;
    private javax.swing.JCheckBox jcTrocaDeFonte;
    private javax.swing.JCheckBox jcUltraVNC;
    private javax.swing.JCheckBox jcUsuarios;
    private javax.swing.JCheckBox jcWinrarFlash;
    private javax.swing.JComboBox jcbSecretaria;
    private javax.swing.JComboBox jcbSetor;
    private javax.swing.JComboBox jcbStatus;
    private javax.swing.JComboBox jcbTecnico;
    private javax.swing.JFormattedTextField jfMemorando;
    private javax.swing.JFormattedTextField jfTelefone;
    private javax.swing.JLabel jlContato;
    private javax.swing.JLabel jlDataConclusao;
    private javax.swing.JLabel jlDataEntrada;
    private javax.swing.JLabel jlDescricaoProblema;
    private javax.swing.JLabel jlEditarComputador;
    private javax.swing.JLabel jlHoraConclusao;
    private javax.swing.JLabel jlHoraEntrada;
    private javax.swing.JLabel jlMemorando;
    private javax.swing.JLabel jlNome;
    private javax.swing.JLabel jlRelatorioManutencao;
    private javax.swing.JLabel jlSecretaria;
    private javax.swing.JLabel jlSetor;
    private javax.swing.JLabel jlStatus;
    private javax.swing.JLabel jlTecnico;
    private javax.swing.JLabel jlTelefone;
    private javax.swing.JTextField jtContato;
    private javax.swing.JTextField jtDataConclusao;
    private javax.swing.JTextField jtDataEntrada;
    private javax.swing.JTextField jtHoraConclusao;
    private javax.swing.JTextField jtHoraEntrada;
    private javax.swing.JTextField jtNome;
    private javax.swing.JTextArea jtaDescricaoProblema;
    // End of variables declaration//GEN-END:variables
}
