
package GUI;

import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import modelo.PermissoesVO;
import modelo.UsuarioVO;
import utilidades.JDesktopImageDefiner;

/**
 * @author Maikel Maciel Rönnau
 * @version 2.0
 * @since 04/01/2015
 */
public class GUIMenu extends javax.swing.JFrame implements InternalFrameListener {

    //Instanciando objeto da classe UsuárioVO para receber as informações do usuário logado:
    private static UsuarioVO user;
    
    //Instanciando objeto da classe PermissoesVO para receber as permissões do usuaário logado:
    private static PermissoesVO per;
    
    //Transferindo login do usuário para variável de acesso global:
    static String loginUsuario;
    
    
    
    /*** Flags para controle das JInternalFrame *******************************/
    
    private static boolean flagGUICadastroComputador = false;
    private static boolean flagGUIManutencaoComputador = false;
    
    private static boolean flagGUICadastroSecretaria = false;
    private static boolean flagGUIManutencaoSecretaria = false;
    
    private static boolean flagGUICadastroSetor = false;
    private static boolean flagGUIManutencaoSetor = false;
    
    private static boolean flagGUICadastroUsuario = false;
    private static boolean flagGUIManutencaoUsuario = false;
    
    /*** Fim das flags para controle das JInternalFrame ***********************/ 
    
    /**
     * Creates new form GUIMenu
     * @param user Objeto contendo as informações do usuário logado
     */
    public GUIMenu(UsuarioVO user) {
        
        //Envinando objetos para variáveis locais:
        this.user = user;
        this.per = this.user.getPermissoes();
        this.loginUsuario = user.getNomeUsuario();

        //Definindo ícone:
        definirIcone();
        
        //Configurando janela para maximizar ao abrir:
        setExtendedState(MAXIMIZED_BOTH);
        
        
        initComponents();
        
        //Método para configurar o sistema conforme as permissões do usuário:
        configurarPermissoes();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane = new javax.swing.JDesktopPane();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuComputador = new javax.swing.JMenu();
        jMenuItemCadastrarComputador = new javax.swing.JMenuItem();
        jMenuItemConsultarComputador = new javax.swing.JMenuItem();
        jMenuSecretaria = new javax.swing.JMenu();
        jMenuItemCadastrarSecretaria = new javax.swing.JMenuItem();
        jMenuItemConsultarSecretaria = new javax.swing.JMenuItem();
        jMenuSetor = new javax.swing.JMenu();
        jMenuItemCadastrarSetor = new javax.swing.JMenuItem();
        jMenuItemConsultarSetor = new javax.swing.JMenuItem();
        jMenuUsuario = new javax.swing.JMenu();
        jMenuItemCadastrarUsuario = new javax.swing.JMenuItem();
        jMenuItemConsultarUsuario = new javax.swing.JMenuItem();
        jMenuOpções = new javax.swing.JMenu();
        jMenuItemRedefinirSenha = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemEstatisticas = new javax.swing.JMenuItem();
        jMenuItemSobre = new javax.swing.JMenuItem();
        jMenuSair = new javax.swing.JMenu();
        jMenuItemFazerLogoff = new javax.swing.JMenuItem();
        jMenuItemFecharSistema = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema EPTI");
        setMinimumSize(new java.awt.Dimension(683, 384));

        jDesktopPane = new JDesktopImageDefiner();
        jDesktopPane.setBackground(java.awt.SystemColor.menu);

        javax.swing.GroupLayout jDesktopPaneLayout = new javax.swing.GroupLayout(jDesktopPane);
        jDesktopPane.setLayout(jDesktopPaneLayout);
        jDesktopPaneLayout.setHorizontalGroup(
            jDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1024, Short.MAX_VALUE)
        );
        jDesktopPaneLayout.setVerticalGroup(
            jDesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 555, Short.MAX_VALUE)
        );

        jMenuComputador.setText("Computador");

        jMenuItemCadastrarComputador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cadastar.png"))); // NOI18N
        jMenuItemCadastrarComputador.setText("Cadastrar computador");
        jMenuItemCadastrarComputador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCadastrarComputadorActionPerformed(evt);
            }
        });
        jMenuItemCadastrarComputador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemCadastrarComputadorKeyPressed(evt);
            }
        });
        jMenuComputador.add(jMenuItemCadastrarComputador);

        jMenuItemConsultarComputador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jMenuItemConsultarComputador.setText("Consultar computadores cadastrados");
        jMenuItemConsultarComputador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConsultarComputadorActionPerformed(evt);
            }
        });
        jMenuItemConsultarComputador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemConsultarComputadorKeyPressed(evt);
            }
        });
        jMenuComputador.add(jMenuItemConsultarComputador);

        jMenuBar.add(jMenuComputador);

        jMenuSecretaria.setText("Secretaria");

        jMenuItemCadastrarSecretaria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cadastar.png"))); // NOI18N
        jMenuItemCadastrarSecretaria.setText("Cadastrar secretaria");
        jMenuItemCadastrarSecretaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCadastrarSecretariaActionPerformed(evt);
            }
        });
        jMenuItemCadastrarSecretaria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemCadastrarSecretariaKeyPressed(evt);
            }
        });
        jMenuSecretaria.add(jMenuItemCadastrarSecretaria);

        jMenuItemConsultarSecretaria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jMenuItemConsultarSecretaria.setText("Consultar secretarias cadastradas");
        jMenuItemConsultarSecretaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConsultarSecretariaActionPerformed(evt);
            }
        });
        jMenuItemConsultarSecretaria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemConsultarSecretariaKeyPressed(evt);
            }
        });
        jMenuSecretaria.add(jMenuItemConsultarSecretaria);

        jMenuBar.add(jMenuSecretaria);

        jMenuSetor.setText("Setor");

        jMenuItemCadastrarSetor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cadastar.png"))); // NOI18N
        jMenuItemCadastrarSetor.setText("Cadastrar setor");
        jMenuItemCadastrarSetor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCadastrarSetorActionPerformed(evt);
            }
        });
        jMenuItemCadastrarSetor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemCadastrarSetorKeyPressed(evt);
            }
        });
        jMenuSetor.add(jMenuItemCadastrarSetor);

        jMenuItemConsultarSetor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jMenuItemConsultarSetor.setText("Consulta setores cadastrados");
        jMenuItemConsultarSetor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConsultarSetorActionPerformed(evt);
            }
        });
        jMenuItemConsultarSetor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemConsultarSetorKeyPressed(evt);
            }
        });
        jMenuSetor.add(jMenuItemConsultarSetor);

        jMenuBar.add(jMenuSetor);

        jMenuUsuario.setText("Usuário");

        jMenuItemCadastrarUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cadastar.png"))); // NOI18N
        jMenuItemCadastrarUsuario.setText("Cadastrar usuário");
        jMenuItemCadastrarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCadastrarUsuarioActionPerformed(evt);
            }
        });
        jMenuItemCadastrarUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemCadastrarUsuarioKeyPressed(evt);
            }
        });
        jMenuUsuario.add(jMenuItemCadastrarUsuario);

        jMenuItemConsultarUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        jMenuItemConsultarUsuario.setText("Consultar usuários cadastrados");
        jMenuItemConsultarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConsultarUsuarioActionPerformed(evt);
            }
        });
        jMenuItemConsultarUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemConsultarUsuarioKeyPressed(evt);
            }
        });
        jMenuUsuario.add(jMenuItemConsultarUsuario);

        jMenuBar.add(jMenuUsuario);

        jMenuOpções.setText("Opções");

        jMenuItemRedefinirSenha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/password.png"))); // NOI18N
        jMenuItemRedefinirSenha.setText("Redefinir senha");
        jMenuItemRedefinirSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRedefinirSenhaActionPerformed(evt);
            }
        });
        jMenuItemRedefinirSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemRedefinirSenhaKeyPressed(evt);
            }
        });
        jMenuOpções.add(jMenuItemRedefinirSenha);
        jMenuOpções.add(jSeparator1);

        jMenuItemEstatisticas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/estatisticas.png"))); // NOI18N
        jMenuItemEstatisticas.setText("Estatisticas");
        jMenuItemEstatisticas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEstatisticasActionPerformed(evt);
            }
        });
        jMenuItemEstatisticas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemEstatisticasKeyPressed(evt);
            }
        });
        jMenuOpções.add(jMenuItemEstatisticas);

        jMenuItemSobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/sobre.png"))); // NOI18N
        jMenuItemSobre.setText("Sobre");
        jMenuItemSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSobreActionPerformed(evt);
            }
        });
        jMenuItemSobre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemSobreKeyPressed(evt);
            }
        });
        jMenuOpções.add(jMenuItemSobre);

        jMenuBar.add(jMenuOpções);

        jMenuSair.setText("Sair");

        jMenuItemFazerLogoff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/logoff.png"))); // NOI18N
        jMenuItemFazerLogoff.setText("Fazer logoff");
        jMenuItemFazerLogoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFazerLogoffActionPerformed(evt);
            }
        });
        jMenuItemFazerLogoff.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemFazerLogoffKeyPressed(evt);
            }
        });
        jMenuSair.add(jMenuItemFazerLogoff);

        jMenuItemFecharSistema.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/sair.png"))); // NOI18N
        jMenuItemFecharSistema.setText("Fechar sistema");
        jMenuItemFecharSistema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFecharSistemaActionPerformed(evt);
            }
        });
        jMenuItemFecharSistema.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItemFecharSistemaKeyPressed(evt);
            }
        });
        jMenuSair.add(jMenuItemFecharSistema);

        jMenuBar.add(jMenuSair);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /*** Métodos da classe ****************************************************/
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 12/04/2014
     */
    private void definirIcone(){
        
        //Criando objeto com a imagem:
        ImageIcon icon = new ImageIcon(this.getClass().getResource("/icones/icone_sistema.png"));
        
        //Definindo imagem:
        setIconImage(icon.getImage());
    }//Fecha método definirIcone.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 14/01/2015
     */
    private void configurarPermissoes(){
        
        /*** Verificando as permissões e definindo as configurações ***********/
        
        if(per.getCadastrarComputador() == 0){
            jMenuItemCadastrarComputador.setEnabled(false);
        }//Fecha if.
        
        if(per.getConsultarComputador() == 0){
            jMenuItemConsultarComputador.setEnabled(false);
        }//Fecha if.
        
        if(per.getCadastrarSecretaria() == 0){
            jMenuItemCadastrarSecretaria.setEnabled(false);
        }//Fecha if.
        
        if(per.getConsultarSecretaria() == 0){
            jMenuItemConsultarSecretaria.setEnabled(false);
        }//Fecha if.
        
        if(per.getCadastrarSetor()== 0) {
            jMenuItemCadastrarSetor.setEnabled(false);
        }//Fecha if.
        
        if(per.getConsultarSetor() == 0) {
            jMenuItemConsultarSetor.setEnabled(false);
        }//Fecha if.
        
        if(per.getCadastrarUsuario() == 0) {
            jMenuItemCadastrarUsuario.setEnabled(false);
        }//Fecha if.
        
        if(per.getConsultarUsuario() == 0){
            jMenuItemConsultarUsuario.setEnabled(false);
        }//Fecha if.
        /*** Fim da verificação das permissões ********************************/        
    }//Fecha método configurarPermissoes.

    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 14/01/2015
     */
    private void abrirGUICadastroComputador(){
    
        //Verificando se a janela já está aberta:
        if(!flagGUICadastroComputador){
            
            try {
            
                //Instanciando objeto da janela GUICadastroComputador:
                GUICadastroComputador gcc = new GUICadastroComputador();
                
                //Alterando valor da flag:
                flagGUICadastroComputador = true;
                
                //Adicionando objeto da janela à lista de ouvires:
                gcc.addInternalFrameListener(this);
                
                //Adicionando objeto à área de trabalho:
                jDesktopPane.add(gcc);
                
                //Tornando a janela visível:
                gcc.setVisible(true);
            } catch (Exception e) {

                //Mensagem de erro:
                JOptionPane.showMessageDialog(
                    this,
                    "Falha ao abrir cadastro de computadores!",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
                //Fim da mensagem de erro.
            }//Fecha catch.
        }//Fecha if.
    }//Fecha método abrirGUICadastroComputador.
    
    private void abrirGUIManutencaoComputador(){
        
        //Verificando se a janela já está aberta:
        if(!flagGUIManutencaoComputador){
            
            try {
            
                //Instanciando objeto da janela GUIManutencaoComputador:
                GUIManutencaoComputador gmc = new GUIManutencaoComputador(per);
                
                //Alterando valor da flag:
                flagGUIManutencaoComputador = true;
                
                //Adicionando objeto da janela à lista de ouvires:
                gmc.addInternalFrameListener(this);
                
                //Adicionando objeto à área de trabalho:
                jDesktopPane.add(gmc);
                
                //Tornando a janela visível:
                gmc.setVisible(true);
            } catch (Exception e) {

                //Mensagem de erro:
                JOptionPane.showMessageDialog(
                    this,
                    "Falha ao abrir manutenção de computadores!",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
                //Fim da mensagem de erro.
            }//Fecha catch.
        }//Fecha if.
    }//Fecha método abrirGUIManutencaoComputador.
    /**
     * @author Maikel Maciel Rönnau
     * @version 2.0
     * @since 04/01/2015
     */
    private void abrirGUICadastroSecretaria(){
        
        //Verificando se a janela já está aberta:
        if (!flagGUICadastroSecretaria) {

            try {

                //Instanciando objeto da janela GUICadastroSecretaria:
                GUICadastroSecretaria gcs = new GUICadastroSecretaria();

                //Alterando valor da flag:
                flagGUICadastroSecretaria = true;

                //Adicionando objeto da janela à lista de ouvires:
                gcs.addInternalFrameListener(this);

                //Adicionando objeto à área de trabalho:
                jDesktopPane.add(gcs);

                //Tornando a janela visível:
                gcs.setVisible(true);
            } catch (Exception e) {

                //Mensagem de erro:
                JOptionPane.showMessageDialog(
                    this,
                    "Falha ao abrir cadastro de secretarias!",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
                //Fim da mensagem de erro.
            }//Fecha catch.
        }//Fecha if.
    }//Fecha método abrirGUICadastroSecretaria. 
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 12/04/2014
     */
    private void abrirGUIManutencaoSecretaria() {
        
        //Verificando se a janela já está aberta:
        if (!flagGUIManutencaoSecretaria) {

            try {

                //Instanciando objeto da janela GUIManutencaoSecretaria:
                GUIManutencaoSecretaria gms = new GUIManutencaoSecretaria(per);

                //Alterando valor da flag:
                flagGUIManutencaoSecretaria = true;

                //Adicionando objeto da janela à lista de ouvires:
                gms.addInternalFrameListener(this);

                //Adicionando objeto à área de trabalho:
                jDesktopPane.add(gms);

                //Tornando a janela visível:
                gms.setVisible(true);
            } catch (Exception e) {

                //Mensagem de erro:
                JOptionPane.showMessageDialog(
                    this,
                    "Falha ao abrir manutenção de secretarias!",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
                //Fim da mensagem de erro.
            }//Fecha catch.
        }//Fecha if.
    }//Fecha método abrirGUIManutencaoSecretaria.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 08/01/2015
     */
    private void abrirGUICadastroSetor(){
        
        //Verificando se a janela já está aberta:
        if(!flagGUICadastroSetor){
            
            try {
                
                //Instanciando objeto da janela GUICadastroSetor:
                GUICadastroSetor gcs = new GUICadastroSetor();
                
                //Alterando valor da flag:
                flagGUICadastroSetor = true;
                
                //Adicionando objeto da janela à lista de ouvires:
                gcs.addInternalFrameListener(this);
                
                //Adicionando objeto à área de trabalho:
                jDesktopPane.add(gcs);
                
                //Tornando a janela visível:
                gcs.setVisible(true);
            } catch (Exception e) {
                
                //Mensagem de erro:
                JOptionPane.showMessageDialog(
                    this,
                    "Falha ao abrir cadastro de setores!",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
                //Fim da mensagem de erro.
            }//Fecha catch.
        }//Fecha if.
    }//Fecha método abrirGUICadastrorSetor.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 09/01/2015
     */
    private void abrirGUIManutencaoSetor(){
        
        //Verificando se a janela já está aberta:
        if(!flagGUIManutencaoSetor){
            
            try {
            
                //Instanciando objeto da janela GUIManutencaoSetor:
                GUIManutencaoSetor gms = new GUIManutencaoSetor(per);
                
                //Alterando valor da flag:
                flagGUIManutencaoSetor = true;
                
                //Adicionando objeto da janela à lista de ouvires:
                gms.addInternalFrameListener(this);
                
                //Adicionando objeto à área de trabalho:
                jDesktopPane.add(gms);
                
                //Tornando a janela visível:
                gms.setVisible(true);
            } catch (Exception e) {

                //Mensagem de erro:
                JOptionPane.showMessageDialog(
                    this,
                    "Falha ao abrir manutenção de setores!",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
                //Fim da mensagem de erro.
            }//Fecha catch.
        }//Fecha if.
    }//Fecha método abrirGUIManutencaoSetor.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 10/01/2015
     */
    private void abrirGUICadastroUsuario(){
        
        //Verificando se a janela já está aberta:
        if(!flagGUICadastroUsuario){
            
            try {
                
                //Instanciando objeto da classe GUICadastroUsuario:
                GUICadastroUsuario gcu = new GUICadastroUsuario();
                
                //Alterando valor da flag:
                flagGUICadastroUsuario = true;
                
                //Adicionando objeto da janela à lista de ouvires:
                gcu.addInternalFrameListener(this);
                
                //Adicionando objeto à área de trabalho:
                jDesktopPane.add(gcu);
                
                //Tornando a janela visível:
                gcu.setVisible(true);
            } catch (Exception e) {
                
                //Mensagem de erro:
                JOptionPane.showMessageDialog(
                    this,
                    "Falha ao abrir cadastro de usuários!",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
                //Fim da mensagem de erro.
            }//Fecha catch.
        }//Fecha if.
    }//Fecha método abrirGUICadastroUsuario.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 10/01/2015
     */
    private void abrirGUIManutencaoUsuario(){
        
        //Verificando se a janela já está aberta:
        if(!flagGUIManutencaoUsuario){
            
            try {
                
                //Instanciando objeto da classe GUIManutencaoUsuario:
                GUIManutencaoUsuario gmu = new GUIManutencaoUsuario(per);
                
                //Alterando valor da flag:
                flagGUIManutencaoUsuario = true;
                
                //Adicionando objeto da janela à lista de ouvires:
                gmu.addInternalFrameListener(this);
                
                //Adicionando objeto à área de trabalho:
                jDesktopPane.add(gmu);
                
                //Tornando a janela visível:
                gmu.setVisible(true);
            } catch (Exception e) {
                
                //Mensagem de erro:
                JOptionPane.showMessageDialog(
                    this,
                    "Falha ao abrir manutenção de usuários!",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
                //Fim da mensagem de erro.
            }//Fecha catch.
        }//Fecha if.
    }//Fecha método abrirGUIManutencaoUsuario.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 10/01/2015
     */
    private void abrirGUIEditarUsuario() {

        try {

            //Instanciando objeto da classe GUIEditarSetor:
            GUIEditarUsuario geu = new GUIEditarUsuario(this, true, user);

            //Tornando a janela visível:
            geu.setVisible(true);
        } catch (Exception e) {

            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao abrir a edição do usuário!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        }//Fecha catch.  
    }//Fecha método abrirGUIEditarUsuario.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 01/02/2015
     */
    private void abrirGUIEstatisticas(){
        
        try {
            
            //Instanciando objeto da classe GUIEstatisticas:
            GUIEstatisticas ge = new GUIEstatisticas(this, true);
            
            //Tornando a janela visível:
            ge.setVisible(true);
        } catch (Exception e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Falha ao abrir as estatísticas!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        }//Fecha catch.
    }//Fecha método abrirGUIEstatisticas.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 02/02/2015
     */
    private void abrirGUISobre(){
        
        try {
            
            //Instanciando objeto da classe GUISobre:
            GUISobre gs = new GUISobre(this, true);
            
            //Tornando a janela visiível:
            gs.setVisible(true);
        } catch (Exception e) {
            
            //Mensagem de erro:
            JOptionPane.showMessageDialog(
                this,
                "Erro ao abrir as informações sobre o sistema!",
                "Erro",
                JOptionPane.ERROR_MESSAGE);
            //Fim da mensagem de erro.
        }//Fecha catch.
    }//Fecha método abrirGUISobre.
    
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 01/02/2015
     */
    private void fazerLogoff(){
        
        //Verificando se o usuário deseja mesmo fechar o sistema:
        int opcao = JOptionPane.showConfirmDialog(
                        this,
                        "Tem certeza que deseja fazer logoff?",
                        "Confirmar logoff",
                        JOptionPane.YES_NO_OPTION);
        //Fim da mensagem de confirmação.
        
        //Verificando a resposta do usuário:
        if(opcao == 0){
            
            //Instanciando objeto da classe GUILogin:
            GUILogin gl = new GUILogin();
            
            //Fechando a tela de menu:
            this.dispose();
            
            //Tornando a janela de login visível:
            gl.setVisible(true);
        }//Fecha if.
    }//Fecha método fazerLogoff.
        
    /**
     * @author Maikel Maciel Rönnau
     * @version 1.0
     * @since 09/01/2015
     */
    private void fecharSistema() {

        //Verificando se o usuário deseja mesmo fechar o sistema:
        int opcao = JOptionPane.showConfirmDialog(
                        this,
                        "Tem certeza que deseja fechar o sistema?",
                        "Confirmar saída",
                        JOptionPane.YES_NO_OPTION);
        //Fim da mensagem de confirmação.
        
        //Verificando a resposta do usuário:
        if(opcao == 0){
            
            //Fechando sistema:
            System.exit(EXIT_ON_CLOSE);
        }//Fecha if.
    }//Fecha método fecharSistema.
    
    /*** Fim dos métodos da classe ********************************************/
    
    private void jMenuItemCadastrarComputadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCadastrarComputadorActionPerformed
        
        //Método abrirGUICadastroComputador:
        abrirGUICadastroComputador();
    }//GEN-LAST:event_jMenuItemCadastrarComputadorActionPerformed

    private void jMenuItemCadastrarComputadorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemCadastrarComputadorKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUICadastroComputador();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemCadastrarComputadorKeyPressed

    private void jMenuItemConsultarComputadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConsultarComputadorActionPerformed
        
        //Método abrirGUIManutencaoComputador:
        abrirGUIManutencaoComputador();
    }//GEN-LAST:event_jMenuItemConsultarComputadorActionPerformed

    private void jMenuItemConsultarComputadorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemConsultarComputadorKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUIManutencaoComputador();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemConsultarComputadorKeyPressed

    private void jMenuItemCadastrarSecretariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCadastrarSecretariaActionPerformed
      
        //Método abrirGUICadastroSecretaria:
        abrirGUICadastroSecretaria();
    }//GEN-LAST:event_jMenuItemCadastrarSecretariaActionPerformed

    private void jMenuItemCadastrarSecretariaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemCadastrarSecretariaKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUICadastroSecretaria();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemCadastrarSecretariaKeyPressed

    private void jMenuItemConsultarSecretariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConsultarSecretariaActionPerformed
        
        //Método abrirGUIManutencaoSecretaria:
        abrirGUIManutencaoSecretaria();
    }//GEN-LAST:event_jMenuItemConsultarSecretariaActionPerformed

    private void jMenuItemConsultarSecretariaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemConsultarSecretariaKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUIManutencaoSecretaria();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemConsultarSecretariaKeyPressed

    private void jMenuItemCadastrarSetorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCadastrarSetorActionPerformed
        
        //Método abrirGUICadastroSetor:
        abrirGUICadastroSetor();
    }//GEN-LAST:event_jMenuItemCadastrarSetorActionPerformed

    private void jMenuItemCadastrarSetorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemCadastrarSetorKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUICadastroSetor();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemCadastrarSetorKeyPressed

    private void jMenuItemConsultarSetorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConsultarSetorActionPerformed
        
        //Método abrirGUIManutencaoSetor
        abrirGUIManutencaoSetor();
    }//GEN-LAST:event_jMenuItemConsultarSetorActionPerformed

    private void jMenuItemConsultarSetorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemConsultarSetorKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUIManutencaoSetor();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemConsultarSetorKeyPressed

    private void jMenuItemCadastrarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCadastrarUsuarioActionPerformed
        
        //Método abrirGUICadastroUsuario:
        abrirGUICadastroUsuario();
    }//GEN-LAST:event_jMenuItemCadastrarUsuarioActionPerformed

    private void jMenuItemCadastrarUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemCadastrarUsuarioKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUICadastroUsuario();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemCadastrarUsuarioKeyPressed

    private void jMenuItemConsultarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConsultarUsuarioActionPerformed
        
        //Método abrirGUIManutencaoUsuario:
        abrirGUIManutencaoUsuario();
    }//GEN-LAST:event_jMenuItemConsultarUsuarioActionPerformed

    private void jMenuItemConsultarUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemConsultarUsuarioKeyPressed
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUIManutencaoUsuario();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemConsultarUsuarioKeyPressed

    private void jMenuItemRedefinirSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRedefinirSenhaActionPerformed
        
        //Método abrirGUIEditarUsuario:
        abrirGUIEditarUsuario();
    }//GEN-LAST:event_jMenuItemRedefinirSenhaActionPerformed

    private void jMenuItemRedefinirSenhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemRedefinirSenhaKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUIEditarUsuario();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemRedefinirSenhaKeyPressed

    private void jMenuItemFecharSistemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFecharSistemaActionPerformed
        
        //Método fecharSistema:
        fecharSistema();
    }//GEN-LAST:event_jMenuItemFecharSistemaActionPerformed

    private void jMenuItemFecharSistemaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemFecharSistemaKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            fecharSistema();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemFecharSistemaKeyPressed

    private void jMenuItemFazerLogoffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFazerLogoffActionPerformed
        
        //Método fazerLogoff:
        fazerLogoff();
    }//GEN-LAST:event_jMenuItemFazerLogoffActionPerformed

    private void jMenuItemFazerLogoffKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemFazerLogoffKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            fazerLogoff();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemFazerLogoffKeyPressed

    private void jMenuItemEstatisticasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEstatisticasActionPerformed
        
        //Método abrirGUIEstatisticas:
        abrirGUIEstatisticas();
    }//GEN-LAST:event_jMenuItemEstatisticasActionPerformed

    private void jMenuItemEstatisticasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemEstatisticasKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUIEstatisticas();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemEstatisticasKeyPressed

    private void jMenuItemSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSobreActionPerformed
        
        //Método
        abrirGUISobre();
    }//GEN-LAST:event_jMenuItemSobreActionPerformed

    private void jMenuItemSobreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItemSobreKeyPressed
        
        //Verificando se o usuário utilizou o teclado para selecionar a opção:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            abrirGUISobre();
        }//Fecha if.
    }//GEN-LAST:event_jMenuItemSobreKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIMenu(new UsuarioVO()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuComputador;
    private javax.swing.JMenuItem jMenuItemCadastrarComputador;
    private javax.swing.JMenuItem jMenuItemCadastrarSecretaria;
    private javax.swing.JMenuItem jMenuItemCadastrarSetor;
    private javax.swing.JMenuItem jMenuItemCadastrarUsuario;
    private javax.swing.JMenuItem jMenuItemConsultarComputador;
    private javax.swing.JMenuItem jMenuItemConsultarSecretaria;
    private javax.swing.JMenuItem jMenuItemConsultarSetor;
    private javax.swing.JMenuItem jMenuItemConsultarUsuario;
    private javax.swing.JMenuItem jMenuItemEstatisticas;
    private javax.swing.JMenuItem jMenuItemFazerLogoff;
    private javax.swing.JMenuItem jMenuItemFecharSistema;
    private javax.swing.JMenuItem jMenuItemRedefinirSenha;
    private javax.swing.JMenuItem jMenuItemSobre;
    private javax.swing.JMenu jMenuOpções;
    private javax.swing.JMenu jMenuSair;
    private javax.swing.JMenu jMenuSecretaria;
    private javax.swing.JMenu jMenuSetor;
    private javax.swing.JMenu jMenuUsuario;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void internalFrameOpened(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) {
        
        //Verificnado se o internalFrame fechado foi o GUICadastroSecretaria:
        if(e.getInternalFrame() instanceof GUICadastroSecretaria){

            //Atribuindo valor false, para que a janela possa ser aberta novamente:
            flagGUICadastroSecretaria = false;
        } else if(e.getInternalFrame() instanceof GUIManutencaoSecretaria){

            //Atribuindo valor false, para que a janela possa ser aberta novamente:
            flagGUIManutencaoSecretaria = false;
        } else if(e.getInternalFrame() instanceof GUICadastroSetor){

            //Atribuindo valor false, para que a janela possa ser aberta novamente:
            flagGUICadastroSetor = false;
        } else if(e.getInternalFrame() instanceof GUIManutencaoSetor){

            //Atribuindo valor false, para que a janela possa ser aberta novamente:
            flagGUIManutencaoSetor = false;
        } else if(e.getInternalFrame() instanceof GUICadastroUsuario){

            //Atribuindo valor false, para que a janela possa ser aberta novamente:
            flagGUICadastroUsuario = false;
        } else if(e.getInternalFrame() instanceof GUIManutencaoUsuario){

            //Atribuindo valor false, para que a janela possa ser aberta novamente:
            flagGUIManutencaoUsuario = false;
        } else if(e.getInternalFrame() instanceof GUICadastroComputador){
            
            //Atribuindo valor false, para que a janela possa ser aberta novamente:
            flagGUICadastroComputador = false;
        } else if(e.getInternalFrame() instanceof GUIManutencaoComputador){
            
            //Atribuindo valor false, para que a janela possa ser aberta novamente:
            flagGUIManutencaoComputador = false;
        }//Fecha else if.
        
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) {
    }
}
